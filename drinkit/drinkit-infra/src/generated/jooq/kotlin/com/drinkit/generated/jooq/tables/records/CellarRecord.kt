/*
 * This file is generated by jOOQ.
 */
package com.drinkit.generated.jooq.tables.records


import com.drinkit.generated.jooq.tables.Cellar

import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CellarRecord() : UpdatableRecordImpl<CellarRecord>(Cellar.CELLAR) {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var ownerId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var name: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var locationCity: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var locationCountry: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var locationCountryCode: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var locationLatitude: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var locationLongitude: Double?
        set(value): Unit = set(7, value)
        get(): Double? = get(7) as Double?

    open var modified: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    /**
     * Create a detached, initialised CellarRecord
     */
    constructor(id: String? = null, ownerId: String? = null, name: String? = null, locationCity: String? = null, locationCountry: String? = null, locationCountryCode: String? = null, locationLatitude: Double? = null, locationLongitude: Double? = null, modified: LocalDateTime? = null): this() {
        this.id = id
        this.ownerId = ownerId
        this.name = name
        this.locationCity = locationCity
        this.locationCountry = locationCountry
        this.locationCountryCode = locationCountryCode
        this.locationLatitude = locationLatitude
        this.locationLongitude = locationLongitude
        this.modified = modified
        resetChangedOnNotNull()
    }
}
